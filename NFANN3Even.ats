FiniteAutomaton testMachine = (
alphabet = {a0 a1 b00 b10 c00 c01 c10 c11},
states = { r0
r1
s0
s1
s2
 q0 
 q1 
 q2 
 q3 
 q4 
 q5 
 q6 
 q7 
 q8 
 q9 
 q10 
 q11 
 q12 
 q13 
 q14 
 q15 
 q16 
 q17 
 q18 
 q19 
 q20 
 q21 
 q22 
 q23 
 q24 
 q25 
 q26 
 q27 
 q28 
 q29 
 q30 
 q31 

acc},
initialStates = { r0
},
finalStates = {
acc},
transitions = {
( r0 a1 r1 )
( r1 a0 s0 )
( r1 a1 s1 )
( r1 a1 s2 )
( s0 a0  q16  )
( s0 a1  q20  )
( s0 a1  q17  )
( s1 a0  q24  )
( s1 a1  q28  )
( s1 a1  q25  )
( s2 a0  q21  )
( q16 b10 q2 )

( q17 b00 q6 )
( q17 b00 q3 )
( q17 b10 q7 )

( q20 b10 q10 )

( q21 b00 q14 )
( q21 b00 q11 )
( q21 b10 q15 )

( q24 b10 q18 )

( q25 b00 q22 )
( q25 b00 q19 )
( q25 b10 q23 )

( q28 b10 q26 )

( q0 c00 q0 )
( q0 c11 q0 )
( q0 c10 q4 )
( q0 c10 q1 )

( q0 a0 acc )
( q0 a1 acc )

( q1 c01 q4 )
( q1 c01 q1 )
( q1 c00 q5 )
( q1 c11 q5 )


( q2 c01 q0 )
( q2 c10 q2 )
( q2 c11 q4 )
( q2 c11 q1 )

( q2 a1 acc )

( q3 c00 q6 )
( q3 c00 q3 )
( q3 c01 q5 )
( q3 c10 q7 )

( q3 a0 acc )

( q4 c00 q8 )
( q4 c11 q8 )
( q4 c10 q12 )
( q4 c10 q9 )


( q5 c01 q12 )
( q5 c01 q9 )
( q5 c00 q13 )
( q5 c11 q13 )


( q6 c01 q8 )
( q6 c10 q10 )
( q6 c11 q12 )
( q6 c11 q9 )


( q7 c00 q14 )
( q7 c00 q11 )
( q7 c01 q13 )
( q7 c10 q15 )


( q8 c00 q16 )
( q8 c11 q16 )
( q8 c10 q20 )
( q8 c10 q17 )


( q9 c01 q20 )
( q9 c01 q17 )
( q9 c00 q21 )
( q9 c11 q21 )


( q10 c01 q16 )
( q10 c10 q18 )
( q10 c11 q20 )
( q10 c11 q17 )


( q11 c00 q22 )
( q11 c00 q19 )
( q11 c01 q21 )
( q11 c10 q23 )


( q12 c00 q24 )
( q12 c11 q24 )
( q12 c10 q28 )
( q12 c10 q25 )

( q12 a0 acc )
( q12 a1 acc )

( q13 c01 q28 )
( q13 c01 q25 )
( q13 c00 q29 )
( q13 c11 q29 )


( q14 c01 q24 )
( q14 c10 q26 )
( q14 c11 q28 )
( q14 c11 q25 )

( q14 a1 acc )

( q15 c00 q30 )
( q15 c00 q27 )
( q15 c01 q29 )
( q15 c10 q31 )

( q15 a0 acc )

( q16 c01 q0 )
( q16 c10 q2 )
( q16 c11 q4 )
( q16 c11 q1 )

( q16 a1 acc )

( q17 c00 q6 )
( q17 c00 q3 )
( q17 c01 q5 )
( q17 c10 q7 )

( q17 a0 acc )

( q18 c00 q2 )
( q18 c11 q2 )
( q18 c10 q6 )
( q18 c10 q3 )


( q19 c01 q6 )
( q19 c01 q3 )
( q19 c00 q7 )
( q19 c11 q7 )

( q19 a0 acc )
( q19 a1 acc )

( q20 c01 q8 )
( q20 c10 q10 )
( q20 c11 q12 )
( q20 c11 q9 )


( q21 c00 q14 )
( q21 c00 q11 )
( q21 c01 q13 )
( q21 c10 q15 )


( q22 c00 q10 )
( q22 c11 q10 )
( q22 c10 q14 )
( q22 c10 q11 )


( q23 c01 q14 )
( q23 c01 q11 )
( q23 c00 q15 )
( q23 c11 q15 )


( q24 c01 q16 )
( q24 c10 q18 )
( q24 c11 q20 )
( q24 c11 q17 )


( q25 c00 q22 )
( q25 c00 q19 )
( q25 c01 q21 )
( q25 c10 q23 )


( q26 c00 q18 )
( q26 c11 q18 )
( q26 c10 q22 )
( q26 c10 q19 )


( q27 c01 q22 )
( q27 c01 q19 )
( q27 c00 q23 )
( q27 c11 q23 )


( q28 c01 q24 )
( q28 c10 q26 )
( q28 c11 q28 )
( q28 c11 q25 )

( q28 a1 acc )

( q29 c00 q30 )
( q29 c00 q27 )
( q29 c01 q29 )
( q29 c10 q31 )

( q29 a0 acc )

( q30 c00 q26 )
( q30 c11 q26 )
( q30 c10 q30 )
( q30 c10 q27 )


( q31 c01 q30 )
( q31 c01 q27 )
( q31 c00 q31 )
( q31 c11 q31 )

( q31 a0 acc )
( q31 a1 acc )


}
);
FiniteAutomaton finalAut = shrinkNwa(testMachine);
//print(numberOfStates(determinize(finalAut)));





assert(!accepts(finalAut, [a1 a0 a0 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c10 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c11 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c00 c11 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c00 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 c10 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c11 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c10 c10 a0]));
assert(accepts(finalAut, [a1 a0 a0 b10 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a0 b10 c11 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c01 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c01 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c00 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c11 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b00 c11 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c00 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c00 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c01 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c10 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c11 c00 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 c01 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c10 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c11 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a0 a1 b10 c11 c10 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c10 c11 a0]));
assert(accepts(finalAut, [a1 a0 a1 b10 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c01 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c01 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c10 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c10 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c11 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b00 c10 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c00 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 c00 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c00 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c01 c11 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c11 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c10 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c11 c10 a0]));
assert(accepts(finalAut, [a1 a1 a0 b10 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a0 b10 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 c01 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c00 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 c01 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 c10 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c00 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c00 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c01 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 c01 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c10 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c01 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c11 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c10 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c11 a0]));
assert(accepts(finalAut, [a1 a1 a1 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c10 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b00 c11 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c00 a0]));
assert(accepts(finalAut, [a1 a1 a1 b10 c01 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c10 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c00 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c01 c11 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c10 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c11 c00 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c10 c01 a0]));
assert(!accepts(finalAut, [a1 a1 a1 b10 c11 c01 a0]));




